{"version":3,"sources":["utils.js","App.js","serviceWorker.js","index.js"],"names":["days_of_a_year","year","isLeapYear","round","num","decimal","Math","pow","getRemainingDays","today","dayjs","currentYear","yearEnd","diff","getRemainingHours","now","endOf","getRemainingDaysInWeek","YearProgress","progress","className","value","max","DayProgress","WeekProgress","App","props","refresh","yearProgress","weekProgress","dayProgress","setState","state","setInterval","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAMA,SAASA,EAAeC,GACtB,OALF,SAAoBA,GAClB,OAAOA,EAAO,MAAQ,GAAMA,EAAO,MAAQ,GAAKA,EAAO,IAAM,EAItDC,CAAWD,GAAQ,IAAM,IAGlC,SAASE,EAAMC,GAAmB,IAAdC,EAAa,uDAAH,EAC5B,OAAOC,KAAKH,MAAMC,EAAME,KAAKC,IAAI,GAAIF,IAAYC,KAAKC,IAAI,GAAIF,GAGzD,SAASG,IACd,IAAMC,EAAQC,MACRC,EAAcD,MAAQT,OACtBW,EAAUF,IAAM,GAAD,OAAIC,EAAJ,WAErB,OAAOR,EADyE,KAAlEH,EAAeW,GAAeC,EAAQC,KAAKJ,EAAO,OAAO,IAAeT,EAAeW,IAIhG,SAASG,IACd,IAAMC,EAAML,MAGZ,OAAOP,EADoD,KAA5C,MADAO,MAAQM,MAAM,OACCH,KAAKE,EAAK,UAAU,IAAe,OAI5D,SAASE,IACd,IAAMF,EAAML,MAGZ,OAAOP,EADsD,KAA9C,OADCO,MAAQM,MAAM,QACEH,KAAKE,EAAK,UAAU,IAAe,Q,MCzBrE,SAASG,EAAT,GAAmC,IAAZC,EAAW,EAAXA,SACrB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,qBAAf,kBAAkD,0CAAYD,EAAZ,OAClD,8BAAUC,UAAU,mBAAmBC,MAAK,UAAKF,GAAYG,IAAI,OAAjE,UAA2EH,EAA3E,OAKN,SAASI,EAAT,GAAkC,IAAZJ,EAAW,EAAXA,SACpB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,qBAAf,iBAAiD,0CAAYD,EAAZ,OACjD,8BAAUC,UAAU,sBAAsBC,MAAK,UAAKF,GAAYG,IAAI,OAApE,UAA8EH,EAA9E,OAMN,SAASK,EAAT,GAAmC,IAAZL,EAAW,EAAXA,SACrB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,qBAAf,0BAA0D,0CAAYD,EAAZ,OAC1D,8BAAUC,UAAU,sBAAsBC,MAAK,UAAKF,GAAYG,IAAI,OAApE,UAA8EH,EAA9E,O,IA8BSM,E,YAzBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,QAAU,WAAO,IAAD,EACkC,CAACnB,IAAoBS,IAA0BH,KAA1Fc,EADS,KACKC,EADL,KACmBC,EADnB,KAEd,EAAKC,SAAS,CAAEH,eAAcC,eAAcC,iBAP5C,EAAKE,MAAQ,CAAEJ,aAAcpB,IAAoBqB,aAAcZ,IAA0Ba,YAAahB,KAFrF,E,iFAKjBmB,YAAYC,KAAKP,QAAS,O,+BAO1B,OACA,yBAAKP,UAAU,aACX,wBAAIA,UAAU,kBAAkBV,MAAQT,OAAxC,WACA,yBAAKmB,UAAU,SACb,kBAACF,EAAD,CAAcC,SAAUe,KAAKF,MAAMJ,gBAEvC,kBAACJ,EAAD,CAAcL,SAAUe,KAAKF,MAAMH,eACnC,kBAACN,EAAD,CAAaJ,SAAUe,KAAKF,MAAMF,mB,GApBtBK,IAAMC,WCtBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f41f3204.chunk.js","sourcesContent":["import dayjs from 'dayjs';\n\nfunction isLeapYear(year) {\n  return year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0);\n}\n\nfunction days_of_a_year(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\n\nfunction round(num, decimal = 2) {\n  return Math.round(num * Math.pow(10, decimal)) / Math.pow(10, decimal);\n}\n\nexport function getRemainingDays() {\n  const today = dayjs();\n  const currentYear = dayjs().year();\n  const yearEnd = dayjs(`${currentYear}-12-31`);\n  const days = (days_of_a_year(currentYear) - yearEnd.diff(today, 'day', true)) * 100 / days_of_a_year(currentYear);\n  return round(days);\n}\n\nexport function getRemainingHours() {\n  const now = dayjs();\n  const dayEnd = dayjs().endOf('day');\n  const hours = (86400 - dayEnd.diff(now, 'second', true)) * 100 / 86400;\n  return round(hours)\n}\n\nexport function getRemainingDaysInWeek() {\n  const now = dayjs();\n  const weekEnd = dayjs().endOf('week');\n  const hours = (604800 - weekEnd.diff(now, 'second', true)) * 100 / 604800;\n  return round(hours);\n}\n\n// export function getRemainingWorkDayHours(start = 9, end = 17) {\n//   const now = dayjs();\n//   const dayEnd = dayjs().hour(hour);\n//   const hours = ()\n// }","import React from 'react';\nimport { getRemainingDays, getRemainingHours, getRemainingDaysInWeek } from './utils';\nimport dayjs from 'dayjs';\n\nimport './App.scss';\n\n\nfunction YearProgress({progress}) {\n  return (\n    <div className='block box'>\n      <div className='content is-medium'>Year Progress: <strong>{`${progress}%`}</strong></div>\n      <progress className=\"progress is-info\" value={`${progress}`} max=\"100\">{`${progress}%`}</progress>\n    </div>\n  )\n}\n\nfunction DayProgress({progress}) {\n  return (\n    <div className='block box'>\n      <div className='content is-medium'>Day Progress: <strong>{`${progress}%`}</strong></div>\n      <progress className=\"progress is-primary\" value={`${progress}`} max=\"100\">{`${progress}%`}</progress>\n\n    </div>\n  )\n}\n\nfunction WeekProgress({progress}) {\n  return (\n    <div className='block box'>\n      <div className='content is-medium'>Current Week Progress: <strong>{`${progress}%`}</strong></div>\n      <progress className=\"progress is-primary\" value={`${progress}`} max=\"100\">{`${progress}%`}</progress>\n    </div>\n  )\n}\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { yearProgress: getRemainingDays(), weekProgress: getRemainingDaysInWeek(), dayProgress: getRemainingHours() };\n  }\n  componentDidMount() {\n    setInterval(this.refresh, 1000);\n  }\n  refresh = () => {\n    let [yearProgress, weekProgress, dayProgress] = [getRemainingDays(), getRemainingDaysInWeek(), getRemainingHours()];\n    this.setState({ yearProgress, weekProgress, dayProgress });\n  }\n  render() {\n    return (\n    <div className=\"container\">\n        <h3 className='title is-large'>{dayjs().year()} so far</h3>\n        <div className='block'>\n          <YearProgress progress={this.state.yearProgress} />\n        </div>\n      <WeekProgress progress={this.state.weekProgress} />\n      <DayProgress progress={this.state.dayProgress} />\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}