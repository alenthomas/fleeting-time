{"version":3,"sources":["utils.js","App.js","serviceWorker.js","index.js"],"names":["days_of_a_year","year","isLeapYear","round","num","decimal","Math","pow","getRemainingDays","today","dayjs","yearEnd","endOf","diff","getRemainingHours","now","getRemainingDaysInWeek","getRemainingDaysInMonth","monthEnd","daysInMonth","Progress","progress","name","className","charAt","toUpperCase","slice","value","max","App","props","refresh","yearProgress","monthProgress","weekProgress","dayProgress","setState","state","setInterval","this","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a19b41b9.chunk.js","sourcesContent":["import dayjs from 'dayjs';\n\nfunction isLeapYear(year) {\n  return year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0);\n}\n\nfunction days_of_a_year(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\n\nfunction round(num, decimal = 2) {\n  return Math.round(num * Math.pow(10, decimal)) / Math.pow(10, decimal);\n}\n\nexport function getRemainingDays() {\n  const today = dayjs();\n  const yearEnd = dayjs().endOf('year');\n  const days = (days_of_a_year(today.year()) - yearEnd.diff(today, 'day', true)) * 100 / days_of_a_year(today.year());\n  return round(days);\n}\n\nexport function getRemainingHours() {\n  const now = dayjs();\n  const dayEnd = dayjs().endOf('day');\n  const hours = (86400 - dayEnd.diff(now, 'second', true)) * 100 / 86400; // 86400 = 1 * 24 * 60 * 60\n  return round(hours);\n}\n\nexport function getRemainingDaysInWeek() {\n  const now = dayjs();\n  const weekEnd = dayjs().endOf('week');\n  const hours = (604800 - weekEnd.diff(now, 'second', true)) * 100 / 604800; // 604800 = 7 * 24 * 60 * 60\n  return round(hours);\n}\n\nexport function getRemainingDaysInMonth() {\n  const now = dayjs();\n  const monthEnd = dayjs().endOf('month');\n  const days = (dayjs().daysInMonth() - monthEnd.diff(now, 'day', true)) * 100 / dayjs().daysInMonth();\n  return round(days);\n}","import React from 'react';\nimport {\n  getRemainingDays,\n  getRemainingHours,\n  getRemainingDaysInWeek,\n  getRemainingDaysInMonth\n} from './utils';\nimport dayjs from 'dayjs';\n\nimport './App.scss';\n\nfunction Progress({progress=0, name='year', className=''}) {\n  return (\n    <div className={`block box ${className}`}>\n      <div className='content is-medium'>\n        {`${name.charAt(0).toUpperCase() + name.slice(1)} Progress:`} <strong>{`${progress}%`}</strong>\n      </div>\n      <progress className=\"progress is-primary\" value={`${progress}`} max=\"100\">{`${progress}%`}</progress>\n    </div>\n  )\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      yearProgress: getRemainingDays(),\n      monthProgress: getRemainingDaysInMonth(),\n      weekProgress: getRemainingDaysInWeek(),\n      dayProgress: getRemainingHours()\n    };\n  }\n  componentDidMount() {\n    setInterval(this.refresh, 1000);\n  }\n  refresh = () => {\n    let [yearProgress, monthProgress, weekProgress, dayProgress] = [\n      getRemainingDays(),\n      getRemainingDaysInMonth(),\n      getRemainingDaysInWeek(),\n      getRemainingHours()\n    ];\n    this.setState({ yearProgress, monthProgress, weekProgress, dayProgress });\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <h3 className='title is-large'>{dayjs().year()} so far</h3>\n        <Progress progress={this.state.yearProgress} name='year' className='year' />\n        <Progress progress={this.state.monthProgress} name='month' className='month' />\n        <Progress progress={this.state.weekProgress} name='week' className='week' />\n        <Progress progress={this.state.dayProgress} name='day' className='day' />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}